# This is a basic workflow to help you get started with Actions

name: DASTPOC

env:
  REGISTRY_NAME: nanonprodgaacr.azurecr.io
  APP_NAME: transaction-mapper
  IMG_TAG: ${{github.sha}}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [self-hosted, Linux, gwam]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Login to Docker
        uses: azure/docker-login@v1
        with:
         login-server: docker.artifactory.platform.manulife.io
         username: ${{ secrets.ARTIFACTORY_USER }}
         password: ${{ secrets.ARTIFACTORY_PASSWORD }} 
         
#       - name: Login to Artifactory
#         uses: azure/docker-login@v1
#         with:
#          login-server: artifactory.platform.manulife.io
#          username: ${{ secrets.ARTIFACTORY_USER }}
#          password: ${{ secrets.ARTIFACTORY_PASSWORD }} 
        
      - name: Install image dockerized OWASP ZAP
        run: docker pull docker.artifactory.platform.manulife.io/owasp/zap2docker-stable
        
      - name: Containerize application
        run: docker build -t transaction-mapper-clone .
        
      - name: Cleanup app from previous runs if it exists
        run: docker stop transaction-mapper-clone || true && docker rm transaction-mapper-clone || true
        
      - name: Cleanup owasp-zap image from previous run if it exists
        run: docker stop owasp-zap || true && docker rm owasp-zap || true
        
      - name: Run Docker Container
        run: docker run --name transaction-mapper-clone -d -p 4451:4451 transaction-mapper-clone
        
      - name: Run OWASP ZAP in headless mode
        run: docker run --name owasp-zap -u zap -p 8081:8081 -i owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8081 -config api.disablekey=true -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true &
           
      - name: Setup Python 3.6
        uses: actions/setup-python@v2
        with: 
           python-version: '3.6'
           run: python -m pip install --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --trusted-host pypi.org --upgrade pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install owasp-zap
        
#       - name: Run zap script
#         run: |
#           cd ./zap/
#           python zap.py

#       - name: Test active scan
#         run: docker run --name owasp-zap -i owasp/zap2docker-stable zap-cli active-scan --recursive http://localhost:4451
      
#         # Container build and push to a Azure Container Registry (ACR)
#       - run: |
#           docker build -t ${{env.REGISTRY_NAME}}/${{env.APP_NAME}}:${{env.IMG_TAG}} .
#           docker push ${{env.REGISTRY_NAME}}/${{env.APP_NAME}}:${{env.IMG_TAG}}
#       - name: Set the target Azure Kubernetes Service (AKS) cluster    
#         uses: azure/aks-set-context@v1
#         with:
#           creds: ${{secrets.AZURE_CREDENTIALS}}
#           cluster-name: ${{ env.CLUSTER_NAME }}
#           resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

#       # Create image pull secret for ACR
#       - uses: azure/k8s-create-secret@v1
#         with:
#           container-registry-url: ${{ env.REGISTRY_NAME }}
#           container-registry-username: ${{env.USER_NAME}}
#           container-registry-password: ${{env.PASSWORD}} 
#           secret-name: ${{ env.SECRET }}
#           namespace: rabbitmq-cluster
#           force: true

#       # Deploy app to AKS
#       - uses: azure/k8s-deploy@v1
#         with:
#           manifests: |
#             deployment.yml
#           images: | 
#             ${{env.REGISTRY_NAME}}/${{env.APP_NAME}}:${{env.IMG_TAG}}
#           imagepullsecrets: |
#             ${{ env.SECRET }}
#           namespace: rabbitmq-cluster
